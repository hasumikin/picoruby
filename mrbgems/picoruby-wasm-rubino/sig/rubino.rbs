
module Rubino
  Comps: Components

  type selector_t = String | Symbol

  type vnode_props_t = Hash[String | Symbol, String | Symbol | nil]
  type vnode_child_t = VNode | String | Integer | Float
  type vnode_children_t = Array[vnode_child_t]

  class Components
    @children: Hash[Symbol, Component]
    def add: (Symbol name, Component comp) -> Component
    def []: (Symbol name) -> Component
    private def method_missing: (Symbol name, *untyped args) ?{ () -> untyped } -> Component
  end

  class Component
    @selector: String
    @element: JS::Object
    @current_vdom: VNode | nil
    def self.attr_selector: (*selector_t attrs) -> void
    def initialize: (?selector_t selector) -> void
    def on: (String event, ?selector_t selector) { (String event_json) -> untyped } -> untyped
    private def update_vdom: () -> VNode
    private def render: (VNode) -> void
    private def h: (String type, ?vnode_props_t props, ?vnode_children_t children) -> VNode
  end

  class VNode
    attr_reader type: String
    attr_reader props: vnode_props_t
    attr_reader children: vnode_children_t
    def initialize: (String type, ?vnode_props_t props, ?(Array[VNode] | String | Integer | Float) children) -> void
    def to_s: () -> String
  end

  type patch_t = [Integer, Array[patch_t]] | [:replace, VNode] | [:props, vnode_props_t]
  type patches_t = Array[patch_t]

  class Differ
    def self.diff: (VNode old_node, VNode new_node) -> patches_t
                 | (nil old_node, VNode | nil new_node) -> [[:replace, VNode | nil]]
                 | (VNode | nil old_node, VNode new_node) -> [[:replace, VNode]]
                 | (VNode old_node, nil new_node) -> [[Symbol]] # [[:remove]]
                 | (vnode_child_t old_node, vnode_child_t new_node) -> [[:replace, vnode_child_t]]
    private def self.diff_props: (vnode_props_t old_props, vnode_props_t new_props) -> vnode_props_t
    private def self.diff_children: (vnode_children_t old_children, vnode_children_t new_children) -> Array[untyped]
  end

  class Patcher
    def self.apply: (JS::Object element, untyped patches) -> JS::Object # TODO: Fix untyped
    private def self.update_props: (JS::Object element, vnode_props_t props_patch) -> void
    private def self.create_element: (VNode node) -> JS::Object
  end
end
