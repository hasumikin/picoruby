type header_t = Hash[String, String]
type httpreturn = {
  status: Integer,
  headers: header_t,
  body: String
}
type mqtt_client_options = {
  client_id: String,
  username: String?,
  password: String?,
  use_tls: bool
}

class Net
  class HTTPUtil
    def self.format_response: (String?) -> (httpreturn | nil)
  end

  class DNS
    def self.resolve: (String host, bool is_tcp) -> String
  end

  class UDPClient
    def self.send: (String host, Integer port, String content, bool is_dtls) -> String?
    private def self._send_impl: (String host, Integer port, String content, bool is_dtls) -> String?
  end

  class TCPClient
    def self.request: (String host, Integer port, String content, bool is_tls) -> String?
    private def self._request_impl: (String host, Integer port, String content, bool is_tls) -> String?
  end

  class HTTPClient
    @host: String
    def initialize: (String host) -> void
    def get: (String path) -> (httpreturn | nil)
    def get_with_headers: (String path, header_t headers) -> (httpreturn | nil)
    def post: (String path, header_t headers, String body) -> (httpreturn | nil)
    def put:  (String path, header_t headers, String body) -> (httpreturn | nil)
  end

  class HTTPSClient
    @host: String
    def initialize: (String host) -> void
    def get: (String path) -> (httpreturn | nil)
    def get_with_headers: (String path, header_t headers) -> (httpreturn | nil)
    def post: (String path, header_t headers, String body) -> (httpreturn | nil)
    def put:  (String path, header_t headers, String body) -> (httpreturn | nil)
  end

  class MQTTClient
    @host: String
    @port: Integer
    @client_id: String

    def initialize: (String host, ?Integer port, ?String client_id) -> void
    def connect: () -> bool
    def publish: (String topic, String payload) -> nil
    def subscribe: (String topic) -> nil
    def disconnect: () -> nil
    private
    def _connect_impl: (String host, Integer port, String client_id, bool use_tls) -> bool
    def _publish_impl: (String payload, String topic) -> nil
    def _subscribe_impl: (String topic) -> nil
    def _disconnect_impl: () -> nil
  end
end
