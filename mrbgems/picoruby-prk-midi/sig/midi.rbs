# TypeProf 0.14.1

# Global variables

class MIDI
  type midi_event = Integer

  NOTE_OFF_EVENT:          midi_event
  NOTE_ON_EVENT:           midi_event
  PITCH_BEND_EVENT:        midi_event
  CONTROL_CHANGE_EVENT:    midi_event
  PROGRAM_CHANGE_EVENT:    midi_event
  MAX_EVENT:               Integer
  KEYCODE:                 Hash[Symbol, Integer]
  VELOCITY_VALUES:         Array[Integer]
  MAP_OFFSET:              Integer
  MAX_PITCHBEND_VALUE:     Integer
  MIN_PITCHBEND_VALUE:     Integer
  DEFAULT_PITCHBEND_VALUE: Integer
  CHORD_PATTERNS:          Hash[Symbol, Array[Integer]]

  def self.init: () -> void
  def self.write: (Array[Integer]) -> void
  def self.keycode: (Symbol) -> Integer?
  def self.keycode_from_mapcode: (Integer) -> Integer
  def self.keycode_to_note_number: (Integer) -> Integer

  @channel: Integer
  @octave_offset: Integer
  @transpose_offset: Integer
  @velocity_offset: Integer
  @buffer: Array[Array[Integer]]
  @key_states: Hash[Integer, Symbol]
  @program_no: Integer
  @bend_value: Integer
  @bend_step:  Integer
  @bend_width: Integer
  @bpm:        Integer
  @arpeggiate_mode: bool
  @chord_mode:      bool
  @chord_pattern:   Symbol

  attr_accessor channel: Integer
  attr_accessor key_states: Hash[Integer, Symbol]
  attr_accessor bend_width: Integer
  attr_accessor bend_step: Integer
  attr_accessor bpm: Integer
  attr_accessor arpeggiate_mode: bool
  attr_accessor chord_mode: bool
  attr_accessor chord_pattern: Symbol

  def initialize: () -> void
  def update_event: (Integer, Symbol) -> void
  def process_request: (Integer, Hash[Symbol, Integer | String]) -> void
  def note_on: (Integer, Integer | nil) -> void
  def note_off: (Integer, Integer | nil) -> void
  def send_pitchbend: () -> void
  def send_pc: (Integer) -> void
  def send_cc: (Integer, Integer) -> void
  def task: () -> void
  def press_bend_event: (:up | :down) -> void
  def release_bend_event: () -> void
  def convert_chord_pattern: (Integer) -> Array[Integer]
end