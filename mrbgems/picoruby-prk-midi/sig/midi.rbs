# TypeProf 0.14.1

# Global variables

class MIDI
  type midi_event = Integer
  type midi_param = Integer
  type play_status = :start | :stop
  type midi_packets = Array[midi_event | midi_param]
  type seq_midi_event = Array[midi_packets]
  type song_slot_group = Array[seq_midi_event]
  type song_slot = Array[song_slot_group]

  NOTE_OFF_EVENT:          midi_event
  NOTE_ON_EVENT:           midi_event
  PITCH_BEND_EVENT:        midi_event
  CONTROL_CHANGE_EVENT:    midi_event
  PROGRAM_CHANGE_EVENT:    midi_event
  SRT_TIMING_CLOCK:        midi_event
  SRT_START:               midi_event
  SRT_STOP:                midi_event
  
  MAX_EVENT:               Integer
  KEYCODE:                 Hash[Symbol, Integer]
  VELOCITY_VALUES:         Array[Integer]
  MAP_OFFSET:              Integer
  MAX_PITCHBEND_VALUE:     Integer
  MIN_PITCHBEND_VALUE:     Integer
  DEFAULT_PITCHBEND_VALUE: Integer
  CHORD_PATTERNS:          Hash[Symbol, Array[Integer]]
  MAX_SLOTS:               Integer
  MAX_SLOT_GROUPS:         Integer

  def self.init: () -> void
  def self.write: (Array[Integer]) -> void
  def self.keycode: (Symbol) -> Integer?
  def self.keycode_from_mapcode: (Integer) -> Integer
  def self.keycode_to_note_number: (Integer) -> Integer

  @channel:                       Integer
  @octave_offset:                 Integer
  @transpose_offset:              Integer
  @velocity_offset:               Integer
  @buffer:                        Array[midi_packets]
  @key_states:                    Hash[Integer, Symbol]
  @program_no:                    Integer
  @bend_value:                    Integer
  @bend_step:                     Integer
  @bend_width:                    Integer
  @default_bpm:                   Integer
  @bpm:                           Integer
  @arpeggiate_mode:               bool
  @chord_mode:                    bool
  @chord_pattern:                 Symbol
  @play_status:                   play_status
  @previous_clock_time:           Integer?
  @previous_sixteenth_beat_time:  Integer?
  @duration_per_beat:             Integer
  @duration_per_sixteenth_beat:   Integer
  @duration_per_clock:            Integer
  @current_seq_no:                Integer
  @slots:                         Array[song_slot]
  @current_slot_group:            Array[Integer]
  @start_seq_no:                  Array[Integer]
  @active_slots:                  Array[Integer]
  @play_repeat:                   bool
  @is_played:                     Array[bool]

  attr_accessor channel: Integer
  attr_accessor key_states: Hash[Integer, Symbol]
  attr_accessor bend_width: Integer
  attr_accessor bend_step: Integer
  attr_accessor bpm: Integer
  attr_accessor arpeggiate_mode: bool
  attr_accessor chord_mode: bool
  attr_accessor chord_pattern: Symbol

  def initialize: () -> void
  def update_event: (Integer, Symbol) -> void
  def process_request: (Integer, Hash[Symbol, Integer | String]) -> void
  def play_slot: (Hash[Symbol, Integer]) -> void
  def note_on: (Integer, Integer | nil) -> void
  def note_off: (Integer, Integer | nil) -> void
  def send_sustain: (1 | 0) -> void
  def send_pitchbend: () -> void
  def send_pc: (Integer) -> void
  def send_cc: (Integer, Integer) -> void
  def send_srt_clock: () -> void
  def send_srt_start: () -> void
  def send_srt_stop: () -> void
  def task: () -> void
  def press_bend_event: (:up | :down) -> void
  def release_bend_event: () -> void
  def convert_chord_pattern: (Integer) -> Array[Integer]
  def change_bpm: (Integer)-> void
  def calc_seq_no: () -> void
  def process_slots: () -> void
  def add_song: (Integer, Integer, Integer, *Array[String]) -> void
end